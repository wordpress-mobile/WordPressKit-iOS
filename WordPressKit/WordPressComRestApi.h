@import Foundation;

// Copied and modified from WordPressKit-Swift.h generated by Xcode

@protocol FilePart <NSObject>
- (nonnull instancetype)initWithParameterName:(NSString * _Nonnull)parameterName url:(NSURL * _Nonnull)url filename:(NSString * _Nonnull)filename mimeType:(NSString * _Nonnull)mimeType;

@property (nonatomic, readonly, strong, nonnull) NSString *parameterName;
@property (nonatomic, readonly, strong, nonnull) NSURL *url;
@property (nonatomic, readonly, strong, nonnull) NSString *filename;
@property (nonatomic, readonly, strong, nonnull) NSString *mimeType;

@end

@protocol WordPressComRestApi<NSObject>
//@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorKeyErrorCode;
//+ (NSString * _Nonnull)ErrorKeyErrorCode;
//@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorKeyErrorMessage;
//+ (NSString * _Nonnull)ErrorKeyErrorMessage;
//@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorKeyErrorData;
//+ (NSString * _Nonnull)ErrorKeyErrorData;
//@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorKeyErrorDataEmail;
//+ (NSString * _Nonnull)ErrorKeyErrorDataEmail;
//@property (nonatomic, class, readonly, copy) NSString * _Nonnull LocaleKeyDefault;
//+ (NSString * _Nonnull)LocaleKeyDefault;
//@property (nonatomic, class, readonly, copy) NSString * _Nonnull LocaleKeyV2;
//+ (NSString * _Nonnull)LocaleKeyV2;
@property (nonatomic, class, readonly, copy) NSString * _Nonnull SessionTaskKey;
+ (NSString * _Nonnull)SessionTaskKey;
@property (nonatomic, class, readonly, copy) NSString * _Nonnull apiBaseURLString;
+ (NSString * _Nonnull)apiBaseURLString;
@property (nonatomic, class, readonly, copy) NSString * _Nonnull defaultBackgroundSessionIdentifier;
+ (NSString * _Nonnull)defaultBackgroundSessionIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull backgroundSessionIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nullable sharedContainerIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull baseURLString;
/// Configure whether or not the user’s preferred language locale should be appended. Defaults to true.
@property (nonatomic) BOOL appendsPreferredLanguageLocale;
- (nonnull instancetype)initWithOAuthToken:(NSString * _Nullable)oAuthToken userAgent:(NSString * _Nullable)userAgent;
- (nonnull instancetype)initWithOAuthToken:(NSString * _Nullable)oAuthToken userAgent:(NSString * _Nullable)userAgent baseUrlString:(NSString * _Nonnull)baseUrlString;
/// Creates a new API object to connect to the WordPress Rest API.
/// <ul>
///   <li>
///     Discussion: When backgroundUploads are activated any request done by the multipartPOST method will use background session. This background session is shared for all multipart
///     requests and the identifier used must be unique in the system, Apple recomends to use invert DNS base on your bundle ID. Keep in mind these requests will continue even
///     after the app is killed by the system and the system will retried them until they are done. If the background session is initiated from an app extension, you <em>must</em> provide a value
///     for the sharedContainerIdentifier.
///   </li>
/// </ul>
/// \param oAuthToken the oAuth token to be used for authentication.
///
/// \param userAgent the user agent to identify the client doing the connection.
///
/// \param backgroundUploads If this value is true the API object will use a background session to execute uploads requests when using the <code>multipartPOST</code> function. The default value is false.
///
/// \param backgroundSessionIdentifier The session identifier to use for the background session. This must be unique in the system.
///
/// \param sharedContainerIdentifier An optional string used when setting up background sessions for use in an app extension. Default is nil.
///
/// \param localeKey The key with which to specify locale in the parameters of a request.
///
/// \param baseUrlString The base url to use for API requests. Default is https://public-api.wordpress.com/
///
- (nonnull instancetype)initWithOAuthToken:(NSString * _Nullable)oAuthToken userAgent:(NSString * _Nullable)userAgent backgroundUploads:(BOOL)backgroundUploads backgroundSessionIdentifier:(NSString * _Nonnull)backgroundSessionIdentifier sharedContainerIdentifier:(NSString * _Nullable)sharedContainerIdentifier localeKey:(NSString * _Nonnull)localeKey baseUrlString:(NSString * _Nonnull)baseUrlString;
/// Cancels all ongoing taks and makes the session invalid so the object will not fullfil any more request
- (void)invalidateAndCancelTasks;
/// Executes a GET request to the specified endpoint defined on URLString
/// \param URLString the url string to be added to the baseURL
///
/// \param parameters the parameters to be encoded on the request
///
/// \param success callback to be called on successful request
///
/// \param failure callback to be called on failed request
///
///
/// returns:
/// a NSProgress object that can be used to track the progress of the request and to cancel the request. If the method
/// returns nil it’s because something happened on the request serialization and the network request was not started, but the failure callback
/// will be invoked with the error specificing the serialization issues.
- (NSProgress * _Nullable)GET:(NSString * _Nonnull)URLString parameters:(NSDictionary<NSString *, id> * _Nullable)parameters success:(void (^ _Nonnull)(id _Nonnull, NSHTTPURLResponse * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nonnull, NSHTTPURLResponse * _Nullable))failure;
/// Executes a POST request to the specified endpoint defined on URLString
/// \param URLString the url string to be added to the baseURL
///
/// \param parameters the parameters to be encoded on the request
///
/// \param success callback to be called on successful request
///
/// \param failure callback to be called on failed request
///
///
/// returns:
/// a NSProgress object that can be used to track the progress of the upload and to cancel the upload. If the method
/// returns nil it’s because something happened on the request serialization and the network request was not started, but the failure callback
/// will be invoked with the error specificing the serialization issues.
- (NSProgress * _Nullable)POST:(NSString * _Nonnull)URLString parameters:(NSDictionary<NSString *, id> * _Nullable)parameters success:(void (^ _Nonnull)(id _Nonnull, NSHTTPURLResponse * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nonnull, NSHTTPURLResponse * _Nullable))failure;
/// Executes a multipart POST using the current serializer, the parameters defined and the fileParts defined in the request
/// This request will be streamed from disk, so it’s ideally to be used for large media post uploads.
/// \param URLString the endpoint to connect
///
/// \param parameters the parameters to use on the request
///
/// \param fileParts the file parameters that are added to the multipart request
///
/// \param requestEnqueued callback to be called when the fileparts are serialized and request is added to the background session. Defaults to nil
///
/// \param success callback to be called on successful request
///
/// \param failure callback to be called on failed request
///
///
/// returns:
/// a NSProgress object that can be used to track the progress of the upload and to cancel the upload. If the method
/// returns nil it’s because something happened on the request serialization and the network request was not started, but the failure callback
/// will be invoked with the error specificing the serialization issues.
- (NSProgress * _Nullable)multipartPOST:(NSString * _Nonnull)URLString parameters:(NSDictionary<NSString *, id> * _Nullable)parameters fileParts:(NSArray<id<FilePart>> * _Nonnull)fileParts requestEnqueued:(void (^ _Nullable)(NSNumber * _Nonnull))requestEnqueued success:(void (^ _Nonnull)(id _Nonnull, NSHTTPURLResponse * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nonnull, NSHTTPURLResponse * _Nullable))failure;
- (BOOL)hasCredentials;
- (NSURL * _Nonnull)temporaryFileURLWithExtension:(NSString * _Nonnull)fileExtension;
@end
